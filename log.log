Flawfinder version 1.31, (C) 2001-2014 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 169
Examining websocket/socket.c

FINAL RESULTS:

websocket/socket.c:18:  [2] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination
  (CWE-120). Consider using strcat_s, strncat, or strlcat (warning, strncat
  is easily misused). Risk is low because the source is a constant string.
websocket/socket.c:19:  [2] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination
  (CWE-120). Consider using strcat_s, strncat, or strlcat (warning, strncat
  is easily misused). Risk is low because the source is a constant string.
websocket/socket.c:20:  [2] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination
  (CWE-120). Consider using strcat_s, strncat, or strlcat (warning, strncat
  is easily misused). Risk is low because the source is a constant string.
websocket/socket.c:22:  [2] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination
  (CWE-120). Consider using strcat_s, strncat, or strlcat (warning, strncat
  is easily misused). Risk is low because the source is a constant string.
websocket/socket.c:35:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use
  functions that limit length, or ensure that the size is larger than the
  maximum possible length.
websocket/socket.c:36:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use
  functions that limit length, or ensure that the size is larger than the
  maximum possible length.

ANALYSIS SUMMARY:

Hits = 6
Lines analyzed = 101 in approximately 0.01 seconds (10429 lines/second)
Physical Source Lines of Code (SLOC) = 87
Hits@level = [0]   0 [1]   0 [2]   6 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   6 [1+]   6 [2+]   6 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 68.9655 [1+] 68.9655 [2+] 68.9655 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
See 'Secure Programming for Linux and Unix HOWTO'
(http://www.dwheeler.com/secure-programs) for more information.
